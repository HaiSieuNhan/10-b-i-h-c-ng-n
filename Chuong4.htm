<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link href="./style/bootstrap.css" type="text/css" rel="stylesheet"/>
    <script src="./style/bootstrap.js"></script>
    <link href="./style/style.css" type="text/css" rel="stylesheet"/>
</head>
<body>
    <div class="container">
        <h1 style="text-align: center;">04 TÌM CÂU TRẢ LỜI ĐÚNG</h1>
        <p style="text-align: justify; "><span style="font-weight: bold;">“Cách để làm việc gì đó tốt hơn là không ngừng tìm kiếm nó.”&nbsp;</span></p>
        <p style="text-align: right; ">THOMAS EDISON</p>
        <p style="text-align: justify; ">Chúng ta nhìn thấy một hình thù kỳ lạ giống loài rắn, được tạo thành từ các khối lập phương theo một cách nào đó, nhưng lại có thể bơi uốn lượn trong nước. Giờ chúng ta thấy ba hình khối trông giống như nòng nọc đang bơi cùng nhau với một vẻ uyển chuyển khác hẳn cấu trúc kiểu LEGO của mình. Đến lượt một sinh vật giống như con rùa bơi ra màn hình, nó được tạo thành từ năm khối hình hộp chữ nhật – một khối tượng trưng cho cơ thể và các khối còn lại cho bốn chân. Bằng cách nào đó, nó bơi hướng về phía mục tiêu, di chuyển thành thục trong nước giống như một người thợ săn đang theo dấu con mồi. Đó là những sinh vật ảo tiến hóa của họa sĩ đồ họa vi tính kiêm nhà nghiên cứu Karl Sims – công trình đã truyền cảm hứng cho hàng trăm nhà khoa học kể từ lần đầu ra mắt năm 1994. Những sinh vật biết bơi, đi lại, nhảy nhót và chiến đấu của ông đã khiến cộng đồng khoa học kinh ngạc. Trong khi các cơ thể ảo của chúng chỉ là những tập hợp các hình khối tương đối đơn giản, thì bộ não nhân tạo lại là mạng lưới các hàm và toán tử rất phức tạp, tiếp nhận thông tin đầu vào nhờ các cảm biến, để tạo ra các chuyển động và hành vi thông minh. Chúng di chuyển trong thế giới ảo được mô phỏng hoàn hảo với nước để bơi lội, hay mặt đất, trọng lực và các định luật vật lý để đi lại hoặc chạy nhảy.</p>
        <p style="text-align: justify; "><br/></p>
        <div style="text-align : center">
            <img src="./img/Anh16.png" alt="" style="width : 40%"/></div>
        <div style="text-align : center"><div><span style="font-style: italic; font-weight: bold;">Các bộ phận của Robot</span></div>
        <div><br/></div>
        <div style="text-align: justify;">Nhưng cách những sinh vật ảo này hoạt động không phải là thứ khiến các nhà khoa học ngạc nhiên nhất. Điều thực sự mang tính đột phá là Sims không lập trình cho những sinh vật này. Ông không thiết kế chúng, không tạo ra hình thù cơ thể và cũng không gắn cho chúng bộ não. Ông cũng ngạc nhiên như những người khác khi lần đầu tiên nhìn thấy chúng. Sims đã giúp các sinh vật ảo của mình tiến hóa.&nbsp;</div>
        <h1 style="text-align: justify;">Sự sống nhân tạo biết tiến hóa</h1>
        <div style="text-align: justify;">Sims đã sử dụng một thuật toán di truyền (GA – Genetic Algorithm) để phát triển các sinh vật ảo, trong đó thước đo phẩm chất (hay “hàm thích ứng” &nbsp;) là quãng đường bơi, đi bộ hoặc nhảy – càng xa càng tốt. Để giải quyết vấn đề này, thuật toán di truyền của ông đã tiến hóa cả cơ thể và bộ não của các sinh vật ảo. Sims thậm chí không biết các giải pháp này vận hành như thế nào. Nhưng ông có thể nhận thấy chúng hoạt động. Khi mô tả công việc của mình cho những khán giả đang kinh ngạc tại Hội nghị Quốc tế về Mô phỏng Hành vi Thích ứng năm 1994, ông giải thích việc bộ não của sinh vật đã trở nên phức tạp như thế nào. Sinh vật giống rùa có cơ thể chỉ gồm năm hình khối đơn giản, nhưng nếu in bộ não của nó ra giấy, bản in sẽ trải ra một phần đáng kể chiều dài của khán phòng. “Chúng vượt xa những gì chúng ta có thể thiết kế. Nếu cố gắng tự kết nối các cảm biến, neuron và bộ chấp hành lại với nhau, có lẽ tôi sẽ không bao giờ tìm ra một giải pháp tốt, nhưng tiến hóa lại làm được điều này.”</div>
        <div style="text-align: justify;">Tiến hóa trong máy tính nghe có vẻ kỳ lạ, nhưng đó là một phương pháp tiếp cận AI đã có từ thủa sơ khai. Thay vì cố gắng viết một chương trình giải quyết vấn đề bằng cách thực hiện một loạt phép tính và xuất câu trả lời, trong thuật toán tiến hóa, những lập trình viên sẽ tạo ra một thế giới ảo và để máy tính tìm ra giải pháp bằng cách tự sản sinh các giải pháp mới ngày càng tốt hơn. Thuật toán di truyền là một trong những cách tiếp cận như vậy. Thuật toán này hoạt động bằng cách tạo ra một quần thể ngẫu nhiên các giải pháp khá vô dụng, xếp hạng chúng theo mức độ thích ứng (khả năng giải quyết vấn đề) và chỉ để các giải pháp thích ứng nhất tạo ra giải pháp con. Thế hệ giải pháp mới sau đó được xếp hạng theo khả năng thích ứng, (giải pháp) thích ứng nhất trong số này lại tiếp tục “sinh con”, và cứ thế. Giải pháp con được sinh ra sẽ thừa hưởng mã di truyền kỹ thuật số từ “cha mẹ”, và các mã này được trộn lẫn với nhau để mỗi giải pháp con có các phần ngẫu nhiên từ cả cha lẫn mẹ. Cùng với đó là một vài đột biến ngẫu nhiên không thường xuyên để tạo ra thuộc tính mới. Cho thuật toán di truyền chạy đủ số thế hệ và đủ dân số sẽ tạo ra các giải pháp có tính phù hợp cao cho vấn đề cần được giải quyết.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align : center">
            <img src="./img/Anh17.png" alt="" style="width : 60%"/></div>
        <div style="text-align : center"><br/></div>
        <div style="text-align : center"><div style="text-align: justify;">Sims không phải là nhà tiên phong duy nhất thể hiện sự độc đáo và mới lạ của quá trình phát triển kỹ thuật số. Khoảng năm năm trước đó, nghệ sĩ William Latham và Stephen Todd đã phát triển Mutator. Đó là một hình thức nghệ thuật mang tính cách mạng giúp nghệ sĩ sáng tạo – bởi nói đúng ra, người nghệ sĩ không tạo ra nó. Nghệ thuật của Latham được thực hiện toàn bộ trên máy tính. Trong trường hợp này, Latham đã hành động như “con mắt của Chúa” – bằng đánh giá chủ quan dựa trên giá trị nghệ thuật, ông chọn ra giải các pháp được sinh sản và bị hủy bỏ. Giống các nhà lai tạo động vật, Latham đã nuôi dưỡng nghệ thuật của mình bằng cách chọn ra những “con vật” mà ông cho là xứng đáng, và từ sự hỗn loạn ngẫu nhiên đã xuất hiện những hình thù đặc biệt, như các hình xoáy và những hình ảnh không thuộc về thế giới này</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">“Một số hình thù trông giống như đến từ một hành tinh xa lạ… chúng liên tục phát triển và thay hình đổi dạng một cách tinh vi.”&nbsp;</span></div>
        <div style="text-align: right;">WILLIAM LATHAM (2015)</div>
        <div style="text-align: right;"><br/></div>
        <div style="text-align: justify;">Sims không phải là nhà tiên phong duy nhất thể hiện sự độc đáo và mới lạ của quá trình phát triển kỹ thuật số. Khoảng năm năm trước đó, nghệ sĩ William Latham và Stephen Todd đã phát triển Mutator. Đó là một hình thức nghệ thuật mang tính cách mạng giúp nghệ sĩ sáng tạo – bởi nói đúng ra, người nghệ sĩ không tạo ra nó. Nghệ thuật của Latham được thực hiện toàn bộ trên máy tính. Trong trường hợp này, Latham đã hành động như “con mắt của Chúa” – bằng đánh giá chủ quan dựa trên giá trị nghệ thuật, ông chọn ra giải các pháp được sinh sản và bị hủy bỏ. Giống các nhà lai tạo động vật, Latham đã nuôi dưỡng nghệ thuật của mình bằng cách chọn ra những “con vật” mà ông cho là xứng đáng, và từ sự hỗn loạn ngẫu nhiên đã xuất hiện những hình thù đặc biệt, như các hình xoáy và những hình ảnh không thuộc về thế giới này.</div>
        <h1 style="text-align: justify;">Tìm kiếm giải pháp từ thiên nhiên</h1>
        <div style="text-align: justify;">&nbsp;Các thuật toán di truyền đã được sử dụng cho một loạt ứng dụng đa dạng, từ việc lập thời gian biểu trong nhà máy đến tối ưu hóa các thiết kế kỹ thuật. Thuật toán di truyền cũng chỉ là một trong số các phương pháp AI tối ưu hóa ngày càng được nhân rộng lấy cảm hứng từ thiên nhiên. Tối ưu hóa đàn kiến giúp tìm ra đường đi tốt nhất cho người giao hàng, tương tự cách đàn kiến tìm đường đi ngắn nhất để mang thức ăn về tổ. Tối ưu bầy đàn (particleswarm optimization) làm cho các vật thể ảo “bay xung quanh” giống như một đàn ong đang tìm hoa, để tìm kiếm giải pháp tối ưu. Hệ thống miễn dịch nhân tạo bắt chước hệ thống miễn dịch của chúng ta và có thể phát hiện virus máy tính hoặc thậm chí điều khiển robot. Các nhà nghiên cứu còn làm cho máy tính tự lập trình bằng cách phát triển mã lệnh của riêng chúng (hoặc gỡ lỗi mã lệnh của chúng ta) với thuật toán di truyền.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align : center">
            <img src="./img/Anh18.png" alt="" style="width : 40%"/></div>
        <div style="text-align : center"><div><span style="font-style: italic; font-weight: bold;">AI tối ưu hóa đường đi</span></div>
        <div><span style="font-style: italic;"><br/></span></div>
        <div style="text-align: justify;">Các thuật toán dựa trên tìm kiếm nằm trong một nhánh riêng biệt của AI. Tìm kiếm là một thủ thuật xoắn não mà các nhà khoa học máy tính “thích khám phá”. Như bài toán Tháp Hà Nội đã đề cập trong chương trước, chúng ta có thể hình dung một không gian các khả năng. Khi tìm kiếm lời giải cho một vấn đề tổng quát, không gian tìm kiếm của bạn có thể giống không gian 3D mà trong đó chúng ta di chuyển: nó có các chiều x, y và z. Giống như mỗi nhánh trên cây tương ứng với một lựa chọn, mọi điểm trong không gian tìm kiếm đều là một giải pháp tiềm năng cho vấn đề. Điểm (2,3,4) là nghiệm với giá trị của các biến lần lượt là x = 2, y = 3, z = 4. Bằng cách tìm kiếm trong không gian này, bạn đang thử các giải pháp tiềm năng khác nhau để tìm ra lời giải tốt nhất. Hầu hết các thuật toán tối ưu hóa lấy cảm hứng từ thiên nhiên đều là các tìm kiếm song song với các đối tượng nằm rải rác trong vùng khảo sát, tất cả cùng lúc tìm kiếm giải pháp tốt nhất. Việc tìm kiếm trong một không gian ba chiều nghe có vẻ dễ dàng, nhưng những phương pháp này áp dụng trong những không gian tìm kiếm có hàng trăm chiều, với chất lượng của lời giải có thể không chắc chắn và có thể thay đổi theo thời gian. Cũng có thể cùng có nhiều lời giải tốt. Đôi khi, chúng thậm chí còn tìm kiếm theo kích thước của không gian, thêm vào hoặc bỏ bớt tham số – nếu không thể tìm thấy giải pháp trong không gian 40 chiều (40 tham số xác định không gian), có thể bạn sẽ tìm thấy nó trong không gian 50 chiều.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">“Một hệ thống kiểm soát mà một ngày nào đó thực sự tạo ra được hành vi “thông minh” có thể trở thành một mớ hỗn độn phức tạp vượt quá tầm hiểu biết của chúng ta.”&nbsp;</span></div>
        <div style="text-align: right;">KARL SIMS (1994)</div>
        <div style="text-align: right;"><br/></div>
        <div style="text-align: justify;">Khi xem xét kỹ lưỡng, ta thấy trí tuệ chỉ là về sự cải thiện. Chúng ta cố gắng học một điều gì đó, rồi tiếp tục luyện tập cho đến khi đủ giỏi. Khi cố gắng tạo ra một robot tốt, chúng ta liên tục cải tiến thiết kế để khiến nó hoạt động hiệu quả hơn. Trong toàn bộ thế giới công nghệ của chúng ta, từ thiết kế đến sản xuất, tiếp thị đến phân phối, việc tìm kiếm các giải pháp tốt hơn là điều nên làm. Nếu có giải pháp nào mạnh mẽ hơn, rẻ hơn, phổ biến hơn và hiệu quả hơn thì chúng ta sẽ muốn tìm ra nó.</div>
        <div style="text-align: justify;">AI và tìm kiếm luôn song hành với nhau. Như chúng ta đã thấy trong chương 02, tìm kiếm là cách phổ biến nhất mà AI sử dụng để đưa ra quyết định nhờ các phép biểu diễn ký hiệu. Tương tự, trong lĩnh vực tối ưu hóa dựa trên tìm kiếm, các nhà nghiên cứu AI cũng sử dụng phương pháp này. Tuy nhiên, tìm kiếm ở đây được sử dụng sâu hơn – thậm chí dùng để thiết kế bộ não của robot. Lấy cảm hứng từ ý tưởng AI “mới” của Brooks với khả năng kết nối nhận thức với hành động (xem chương 03), hầu hết các nhà nghiên cứu trong lĩnh vực robot tiến hóa đều sử dụng bộ não không dựa trên biểu tượng cho robot của mình. Các khối cấu thành bộ não robot có thể được tạo ra từ mô phỏng neuron , máy trạng thái hữu hạn, bộ quy tắc hoặc phương trình toán học. Chức năng tìm kiếm được sử dụng để gắn các khối đó với nhau theo cách phù hợp, kết nối chúng với các cảm biến và bộ chấp hành, giúp robot có thể thực hiện các tác vụ thực tế.&nbsp;</div>
        <h1 style="text-align: justify;">Robot tiến hóa</h1>
        <div style="text-align: justify;">Dario Floreano là một trong số những người tiên phong trong lĩnh vực này. Ông tạo ra bộ não tự động cho robot bằng cách cải tiến cấu hình của các neuron mô phỏng. Ông phát triển bộ não giúp chúng điều hướng trong mê cung hoặc học cách theo dõi vị trí của chúng, quay lại và tự sạc ngay trước khi hết pin. Nhưng Floreano không chỉ phát triển bộ não – ông còn muốn biết bộ não hoạt động như thế nào. Vì vậy, ông mở não của chúng ra và kiểm tra từng neuron riêng lẻ để xem neuron nào được kích hoạt với mỗi hành vi. Không giống như với sinh vật, ngay cả khi thông tin được mã hóa trong một mạng lưới neuron bí ẩn, trong máy tính, chúng ta có thể kiểm tra từng chi tiết và quan sát cách bộ não nhân tạo suy nghĩ, nhìn thấy mọi neuron và những gì chúng thể hiện khi robot thực hiện các hành vi khác nhau.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align : center">
            <img src="./img/Anh19.png" alt="" style="width : 40%"/></div>
        <div style="text-align : center"><div><span style="font-style: italic; font-weight: bold;">Thiết bị bay không người lái</span></div>
        <div><span style="font-style: italic;"><br/></span></div>
        <div style="text-align: justify;">Floreano đã khám phá cực kỳ nhiều loại bộ não robot tiến hóa khác nhau và xây dựng các cơ thể robot lấy cảm hứng từ sinh vật, gồm các loài đi bộ và cả các loài nhảy như bọ chét. Nhưng chuyên môn của ông lại là robot biết bay. Floreano đã phát triển bộ não cho khí cầu nhỏ, thiết bị bay không người lái (drone) và robot bay. Hiện ông sở hữu hai công ty drone là senseFly và Flyability, cung cấp các robot bay có chức năng kiểm tra và khảo sát.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">”Một trong những vẻ đẹp của tiến hóa kỹ thuật số là vai trò của nhà thiết kế có thể được giảm xuống mức rất thấp.”</span></div>
        <div style="text-align: right;">&nbsp;DARIO FLOREANO (2012)</div>
        <div style="text-align: right;"><br/></div>
        <div style="text-align: justify;">Một số nhà nghiên cứu không chỉ sử dụng công cụ tìm kiếm để cải tiến bộ não robot mà còn để giúp tiến hóa cơ thể cho nó. Một trong những ví dụ đáng chú ý nhất là công trình của Hod Lipson và Jordan Pollack. Họ sao chép ý tưởng của Karl Sims và phát triển những sinh vật ảo kỳ quái có thể di chuyển trong thế giới ảo. Sau đó các nhà khoa học giàu trí tưởng tượng này đã sử dụng một máy in 3D để biến ảo thành thật. Các robot tiến hóa trông kỳ cục đã được in và chế tạo. Chúng bò trong thế giới thực, cũng giống như phiên bản ảo của chúng bò trong môi trường ảo. Đó là một thủ thuật khéo léo, vì giữa thế giới mô phỏng và thế giới của chúng ta tồn tại một “khoảng cách thực tại”, mà một bộ não và cơ thể có thể hoạt động tốt ở dạng thức mô phỏng, bằng cách nào đó không còn hoạt động được trong thế giới thực vốn lộn xộn, khó đoán hơn.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">“Đó là một ví dụ về cách bạn nắm bắt ý tưởng về sự tiến hóa và đưa nó vào máy tính, rồi sử dụng ý tưởng đó để thiết kế mọi thứ, giống như sự tiến hóa thiết kế nên các dạng sống đẹp đẽ trong sinh học.”</span></div>
        <div style="text-align: right;">&nbsp;HOD LIPSON (2014)</div>
        <div><br/></div>
        <h1 style="text-align: justify;">Máy tính tự thiết kế&nbsp;</h1>
        <div style="text-align: justify;">Có lẽ điều duy nhất mà các nhà nghiên cứu đó không làm là phát triển các linh kiện điện tử cho bộ não máy tính của robot. Nhưng bạn dù có tin hay không thì các nhà nghiên cứu khác cũng đã thực hiện chính xác công việc này. Trở lại năm 1996, Adrian Thompson đã nghĩ ra một ý tưởng mới – liên kết tính toán tiến hóa với một loại chip đặc biệt được gọi tắt là FPGA (field programmable gate array, mảng phần tử logic lập trình được). Loại chip này giống như các mạch điện tử có thể cấu hình lại. Thay vì cần thiết kế một mạch điện tử và chế tạo trong một nhà máy sản xuất chip tốn kém, FPGA có thể được cấu hình lại bất cứ lúc nào bằng cách gửi tín hiệu yêu cầu đến chúng. Khi đó, các thành phần bên trong con chip sẽ kết nối với nhau theo cách bạn muốn và cấu hình mới được lưu trữ trong bộ nhớ dài hạn. Ban đầu, những con chip này được thiết kế để ứng dụng trong mạng máy tính và viễn thông, nơi các thiết kế mới cần được triển khai nhanh chóng.</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">“Mạch điện tiến hóa sử dụng ít diện tích silic hơn đáng kể so với những gì một nhà thiết kế cần trong tình huống tương tự.”</span></div>
        <div style="text-align: right;">&nbsp;ADRIAN THOMPSON (1996)</div>
        <div style="text-align: right;"><br/></div>
        <div style="text-align: justify;">Thompson tự hỏi quá trình tính toán tiến hóa sẽ tác động lên chip FPGA như thế nào. Ông thử các băng tần &nbsp;khác nhau và yêu cầu thuật toán tiến hóa tìm ra một mạch điện có thể phân biệt giữa các tần số đó. Sau nhiều thế hệ phát triển và thử nghiệm các mạch điện tử trong chip FPGA, quá trình tiến hóa đã tìm thấy các vi mạch hoạt động được. Nhưng khi nhìn vào thành quả của mình, Thompson rất đỗi ngạc nhiên. Thay vì tuân theo các nguyên tắc thiết kế điện tử thông thường (và làm thế nào quá trình tiến hóa này có thể làm được như vậy, vì nó không hề biết đến những nguyên tắc này), quá trình tiến hóa đã tạo ra các mạch điện kỳ lạ, đôi khi gần như không thể giải thích được. Các vi mạch thu được nhỏ hơn so với dự kiến, sử dụng các linh kiện điện tử theo những cách khác thường. Trong một số trường hợp, các thành phần của chip, dù không đóng góp vào sự vận hành của mạch điện tử, bằng cách nào đó, vẫn được sử dụng để ảnh hưởng đến kết quả đầu ra và khiến nó tốt hơn. Thompson nhận ra rằng quá trình tiến hóa đã viện đến các đặc tính vật lý của silic nằm sâu bên trong cấu tạo của các linh kiện điện tử, điều mà không một người thiết kế nào có thể hy vọng làm được. Đôi khi các thiết kế còn tận dụng cả điều kiện môi trường – thay đổi nhiệt độ một chút, con chip sẽ hoạt động không tốt. Thử thiết kế trên một chip FPGA khác nhưng giống hệt cái trước thì thấy nó không hoạt động. Việc tiến hóa trong phạm vi nhiệt độ lớn hơn với nhiều chip FPGA giúp mang lại các giải pháp bền vững hơn – tiến hóa thiết kế những gì cần thiết và chỉ dừng lại ở đó. Ngày nay, các nhà nghiên cứu vẫn tiếp tục nghiên cứu lĩnh vực tiến hóa phần cứng. Một số thậm chí còn thêm vào tính năng “tăng trưởng phát triển” (developmental growth) giúp các mạch phôi “trưởng thành” ở độ phức tạp cao hơn. Việc tiến hóa các mạch điện bằng máy tính không phải là điều dễ dàng, nhưng nhiều năm phát triển liên tục đã đưa đến các kỹ thuật mới dường như được thiết lập để thay đổi cách chúng ta tạo ra AI trong tương lai. Julian Miller bắt đầu bằng việc phát triển các mạch điện tử, nhưng hiện nay ông đang nghiên cứu phát triển thế hệ mạng lưới thần kinh mới nhất, với số lượng neuron có thể thay đổi trong quá trình học máy. Ông là một trong những người đầu tiên chứng minh rằng sự tiến hóa có thể tạo ra những bộ não nhân tạo có thể giải quyết các vấn đề khác nhau bằng cách sử dụng cùng một nhóm neuron theo những cách khác nhau (xem chương 10 để biết thêm về điều này).</div>
        <div style="text-align: justify;"><br/></div>
        <div style="text-align: justify;"><span style="font-weight: bold;">“Sự tiến hóa trên máy tính cho phép chúng ta tìm ra những giải pháp mới cho những vấn đề gây bối rối cho trực giác của con người.”</span></div>
        <div style="text-align: right;">&nbsp;JULIAN MILLER (2019)</div>
        <div><br/></div>
        <div style="text-align: justify;">Tìm kiếm là một phần của những thành công gần đây với các kỹ thuật như học tăng cường (reinforcement learning) mà chúng ta sẽ thấy trong các chương sau. Những thành công của nó dường như gây ra cả sự kinh ngạc và sợ hãi. Một số nhà bình luận cho rằng các kỹ thuật như thuật toán di truyền sẽ cho phép AI tự sửa đổi cho đến khi chúng thông minh hơn chúng ta. Họ đưa ra những kịch bản đáng sợ gây ngờ vực như cốt truyện của những bộ phim khoa học viễn tưởng nổi tiếng, với việc AI thống trị thế giới và tiêu diệt toàn bộ loài người.</div>
        <div style="text-align: justify;">Rất may, những viễn cảnh đen tối như vậy lại thiếu tính thực tế. Chúng sẽ không xảy ra vì nhiều lý do, nhưng có lẽ trước tiên là vì việc tìm kiếm các giải pháp là vô cùng khó khăn. Các nhà nghiên cứu đã đạt được những thành tựu đáng nể, nhưng đó là thành quả đạt được sau nhiều thập kỷ vật lộn trong các phòng thí nghiệm của hàng nghìn nhà khoa học xuất sắc. Ở mọi giai đoạn của nghiên cứu, kết quả thường gặp là máy tính bị treo và không tìm ra giải pháp tốt. Thông thường, không gian là quá lớn để thu được kết quả tìm kiếm trong một khoảng thời gian hợp lý, hoặc không gian quá phức tạp để điều hướng hay bản chất của không gian đó thay đổi quá nhanh chóng. Thời gian cần thiết để kiểm tra mỗi giải pháp tiềm năng sẽ giới hạn số lượng giải pháp có thể được xem xét – giải pháp càng phức tạp thì càng mất nhiều thời gian để kiểm tra. Bất chấp sức mạnh tínhtoán đã tăng vọt so với vài thập kỷ trước, điều đó không bao giờ là đủ, và điều này có thể sẽ còn tồn tại trong nhiều thập kỷ nữa, nếu không muốn nói là hàng thế kỷ. Sức mạnh máy tính cũng không giúp chúng ta hiểu được cách khiến nó hoạt động. Các nhà nghiên cứu học được nhiều thủ thuật từ tự nhiên, từ quá trình tiến hóa, hệ thống miễn dịch hoặc từ các đàn chim, nhưng chúng ta vẫn còn nhiều điều để học hỏi. Đơn giản là chúng ta không biết làm thế nào mà quá trình tiến hóa tự nhiên có thể tìm kiếm trong một không gian dường như vô tận các khả năng và nhận được các giải pháp sống.&nbsp;</div>
        <div style="text-align: justify;">Cuối cùng, tìm kiếm giúp máy tính tìm ra giải pháp cho các vấn đề. Nó có thể hoạt động tốt một cách ngoạn mục nhưng luôn cần đến sự giúp đỡ con người để vận hành.</div>
        <div style="text-align: justify;"><br/></div>
        </div>
        <div style="text-align: center;"><br/></div>
        <div><br/></div>
        </div>
        <div style="text-align: center;"><br/></div>
        </div>
        <div style="text-align: center;"><br/></div>
        <div style="text-align: justify;"><br/></div>
        </div>
        <p style="text-align: justify;"><br/></p>
    </div>
</body>
</html>